<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Ikechukwukalu\Sanctumauthstarter\Traits\Helpers;
use App\Services\Auth\PinService;
use App\Http\Requests\Auth\ChangePinRequest;

class PinController extends Controller
{
    use Helpers;

    private PinService $pinService;

    public function __construct()
    {
        $this->pinService = new PinService;
    }

    /**
     * User change pin.
     *
     * Within the config file, you are required to determine the number
     * of previously used pins a User is not allowed to use anymore
     * by setting <b>pin.check_all</b> to <b>TRUE/FALSE</b> or to an <b>int</b>
     * value and <b>pin.number</b> to a corresponding <b>int</b>
     * value as well.
     *
     * You can choose to notify a User whenever a pin is changed by setting
     * <b>pin.notify.change</b> to <b>TRUE</b>
     *
     * @header Authorization Bearer {Your key}
     *
     * @bodyParam current_pin string required The user's pin. Example: 0000
     * @bodyParam pin string required The pin for user authentication must contain only numbers. Example: 1234
     * @bodyParam pin_confirmation string required Must match <small class="badge badge-blue">pin</small> Field. Example: 1234
     *
     * @response 200
     *
     * {
     * "status": "success",
     * "status_code": 200,
     * "data": {
     *      "message": string
     *  }
     * }
     *
     * @authenticated
     * @group Auth APIs
     */

    public function changePin(ChangePinRequest $request): JsonResponse
    {
        if ($data = $this->pinService->handlePinChange($request))
        {
            return $this->httpJsonResponse(
                trans('sanctumauthstarter::general.success'), 200, $data);
        }

        return $this->unknownErrorResponse();
    }

    /**
     * User pin authentication.
     *
     * @header Authorization Bearer {Your key}
     *
     * @bodyParam _pin string required The user's pin must contain only numbers. Example: 0000
     * @urlParam uuid string required Example: eab8cce0-bb22-4c53-8924-b885ebb67f5a
     *
     * @authenticated
     * @group Auth APIs
     * @subgroup Require Pin APIs
     * @subgroupDescription <b>require.pin</b> middleware can
     * be added to a route to require pin authentication before
     * processing any request to that route. The <b>require.pin</b>
     * middleware would arrest any incoming request and return a laravel
     * signed temporary URL via the route specified in <b>pin.route</b>.
     * The User is meant to carryout a pin authentication over the
     * returned URL and the <b>require.pin</b> middleware would process
     * the previously arrested request if the authentication is successful.
     *
     * Within the config file, use the <b>pin.maxAttempts</b> and
     * the <b>pin.delayMinutes</b> to adjust the route throttling for
     * pin authentication.
     */

    public function pinRequired(Request $request, $uuid): JsonResponse
    {
        if ($data = $this->pinService->pinRequestAttempts($request)) {
            return $this->httpJsonResponse(
                trans('sanctumauthstarter::general.fail'), 500, $data);
        }

        if ($data = $this->pinService->pinUrlHasValidSignature($request)) {
            return $this->httpJsonResponse(
                trans('sanctumauthstarter::general.fail'), 401, $data);
        }

        if ($data = $this->pinService->pinUrlHasValidUUID($uuid)) {
            return $this->httpJsonResponse(
                trans('sanctumauthstarter::general.fail'), 401, $data);
        }

        if ($data = $this->pinService->pinValidation($request)) {
            return $this->httpJsonResponse(
                trans('sanctumauthstarter::general.fail'), 400, $data);
        }

        return $this->pinService->handlePinRequired($request, $uuid);
    }
}
