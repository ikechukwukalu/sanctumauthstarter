<?php

namespace App\Services\Auth;

use App\Http\Requests\Auth\ChangePinRequest;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Ikechukwukalu\Sanctumauthstarter\Notifications\PinChange;
use Ikechukwukalu\Sanctumauthstarter\Models\OldPin;
use Ikechukwukalu\Sanctumauthstarter\Models\RequirePin;
use App\Services\Auth\ThrottleRequestsService;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Validator;
use Ikechukwukalu\Sanctumauthstarter\Rules\CurrentPin;
use Ikechukwukalu\Sanctumauthstarter\Traits\Helpers;

class PinService {

    use Helpers;

    public function __construct()
    {
        $this->throttleRequestsService = new ThrottleRequestsService(
            config('sanctumauthstarter.pin.maxAttempts', 3),
            config('sanctumauthstarter.pin.delayMinutes', 1)
        );
    }

    public function handlePinChange(ChangePinRequest $request) : ?array
    {
        $validated = $request->validated();
        $user = Auth::user();
        $user->pin = Hash::make($validated['pin']);
        $user->default_pin = (string) $validated['current_pin'] !== (string) config('sanctumauthstarter.pin.default', '0000');

        if ($user->save()) {
            OldPin::create([
                'user_id' => $user->id,
                'pin' => Hash::make($validated['pin'])
            ]);

            if (config('sanctumauthstarter.pin.notify.change', true)) {
                $user->notify(new PinChange());
            }

            return ['message' => trans('sanctumauthstarter::pin.changed')];
        }

        return null;
    }

    public function handlePinRequired(Request $request, string $uuid): JsonResponse
    {
        $requirePin = $this->getPinRequiredURL($uuid);
        $this->throttleRequestsService->clearAttempts($request);
        $this->updatePinRequest($request, $requirePin);

        $savedRequest = Request::create($requirePin->route_arrested,
                        $requirePin->method, ['_uuid' => $uuid]);
        $response = Route::dispatch($savedRequest);

        return $response;
    }

    public function pinRequestAttempts(Request $request): ?array
    {
        return $this->requestAttempts($request, 'sanctumauthstarter::pin.throttle');
    }

    public function pinUrlHasValidSignature(Request $request): ?array
    {
        if (!$request->hasValidSignature()) {
            return ['message' =>
                trans('sanctumauthstarter::pin.expired_url')];
        }

        return null;
    }

    public function pinUrlHasValidUUID(string $uuid): ?array
    {
        if(!$this->getPinRequiredURL($uuid)) {
            return ['message' =>
                trans('sanctumauthstarter::pin.invalid_url')];
        }

        return null;
    }

    public function pinValidation(Request $request): ?array
    {
        $validator = Validator::make($request->all(), [
            config('sanctumauthstarter.pin.input', '_pin') =>
            ['required', 'string',
                new CurrentPin(
                    config('sanctumauthstarter.pin.allow_default_pin', false)
                )
            ],
        ]);

        if ($validator->fails()) {
            return (array) $validator->errors()->all();
        }

        return null;
    }

    public static function pinRequestTerminated(): array
    {
        return [trans('sanctumauthstarter::general.fail'), 401,
            ['message' => trans('sanctumauthstarter::pin.terminated')]];
    }

    public static function pinValidationURL(string $url, null|string $redirect): array
    {
        return [trans('sanctumauthstarter::general.success'), 200,
            [
                'message' => trans('sanctumauthstarter::pin.require_pin'),
                'url' => $url,
                'redirect' => $redirect
            ]];
    }

    private function updatePinRequest(Request $request, RequirePin $requirePin): void
    {
        $payload = unserialize(Crypt::decryptString($requirePin->payload));

        $request->merge([
            'expires' => null,
            'signature' => null,
            config('sanctumauthstarter.pin.input', '_pin') => null
        ]);

        foreach($payload as $key => $item) {
            $request->merge([$key => $payload[$key]]);
        }
    }

    private function getPinRequiredURL(string $uuid): ?RequirePin
    {
        return RequirePin::whereBelongsTo(Auth::user())
                        ->where('uuid', $uuid)
                        ->whereNull('approved_at')
                        ->whereNull('cancelled_at')
                        ->first();
    }

}
