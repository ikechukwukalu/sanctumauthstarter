<?php

namespace App\Services\Auth;

use Illuminate\Http\Request;
use Ikechukwukalu\Sanctumauthstarter\Traits\Helpers;
use Ikechukwukalu\Sanctumauthstarter\Events\SocialiteLogin;
use Laravel\Socialite\Facades\Socialite;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Ikechukwukalu\Sanctumauthstarter\Notifications\UserLogin;
use Carbon\Carbon;
use Ikechukwukalu\Sanctumauthstarter\Models\SocialiteUserDeviceLogin;
use App\Models\User;

class SocialiteService
{
    use Helpers;

    public function handleAuthRedirect(Request $request): void
    {
        $socialiteUser = SocialiteUserDeviceLogin::where("user_uuid", $request->uuid ?? null)
                            ->whereNotNull('user_id')
                            ->whereNotNull('user_email')
                            ->first();

        if (isset($socialiteUser->user_uuid))
        {
            abort(440, trans('sanctumauthstarter::cookie.error_440'));
        }

        SocialiteUserDeviceLogin::create([
                "user_uuid" => $request->uuid,
                "ip_address" => $this->getUserIp($request),
                "user_agent" => $request->userAgent(),
            ]
        );

        session(['user_uuid' => $request->uuid]);
    }

    public function handleAuthCallback(Request $request): User
    {
        $userUUID = session('user_uuid');
        if (!$userUUID) {
            abort(440, trans('sanctumauthstarter::cookie.error_440'));
        }

        session()->forget('user_uuid');
        $google = Socialite::driver('google')->user();

        $user = User::firstOrCreate([
            'email' => $google->email,
        ], [
            'name' => $google->name,
            'email' => $google->email,
            'socialite_signup' => true,
            'form_signup' => false
        ]);

        Auth::login($user);
        $token = $user->createToken($user->email);

        if (config('sanctumauthstarter.login.notify.user', true)) {
            $now = Carbon::now();
            $time = $now->isoFormat('Do of MMMM YYYY, h:mm:ssa');
            $deviceAndLocation = $this->getLoginUserInformation();
            $user->notify(new UserLogin($time, $deviceAndLocation));
        }

        SocialiteUserDeviceLogin::where('user_uuid', $userUUID)->update([
            "user_id" => $user->id,
            "user_email" => $user->email
        ]);
        SocialiteLogin::dispatch($user, $token, $userUUID);

        return $user;
    }
}
