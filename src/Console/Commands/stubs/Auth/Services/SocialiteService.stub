<?php

namespace App\Services\Auth;

use Illuminate\Http\Request;
use Ikechukwukalu\Sanctumauthstarter\Traits\Helpers;
use Ikechukwukalu\Sanctumauthstarter\Events\SocialiteLogin as SocialiteLoginEvent;
use Laravel\Socialite\Facades\Socialite;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Ikechukwukalu\Sanctumauthstarter\Notifications\UserLogin;
use Carbon\Carbon;
use Ikechukwukalu\Sanctumauthstarter\Models\SocialiteLogin;
use App\Models\User;
use Laragear\TwoFactor\Facades\Auth2FA;

class SocialiteService
{
    use Helpers;

    public function handleAuthRedirect(Request $request): void
    {
        SocialiteLogin::firstOrCreate(
            [
                'user_uuid' => $request->uuid,
                'used' => false,
            ],
            [
                'user_uuid' => $request->uuid,
                'ip_address' => $this->getUserIp($request),
                'user_agent' => $request->userAgent(),
            ]
        );

        session(['user_uuid' => $request->uuid]);
    }

    public function handleAuthCallback(Request $request): ?User
    {
        $userUUID = session('user_uuid');
        if (!$userUUID) {
            abort(440, trans('sanctumauthstarter::cookie.error_440'));
        }

        $user = $this->getUserDetails();
        $tempPassword = $this->generateSalt();
        $user->update([
            'password' => Hash::make($tempPassword)
        ]);

        if (!Auth2FA::attempt([
                'email' => $user->email,
                'password' => $tempPassword
            ], true)) {
            return null;
        }

        $this->throttleRequestsService->clearAttempts($request);

        $user->update([
            'password' => null
        ]);

        session()->forget('user_uuid');
        session()->forget('user');

        $token = $user->createToken($user->email);

        if (config('sanctumauthstarter.login.notify.user', true)) {
            $now = Carbon::now();
            $time = $now->isoFormat('Do of MMMM YYYY, h:mm:ssa');
            $deviceAndLocation = $this->getLoginUserInformation();
            $user->notify(new UserLogin($time, $deviceAndLocation));
        }

        SocialiteLoginEvent::dispatch($user, $token, $userUUID);

        SocialiteLogin::where('user_uuid', $userUUID)->update([
            'user_id' => $user->id,
            'email' => $user->email,
            'used' => true
        ]);

        return $user;
    }

    public function loginRequestAttempts(Request $request): ?array
    {
        return $this->requestAttempts($request, 'sanctumauthstarter::auth.throttle');
    }

    private function getUserDetails(): User
    {
        if (!session('user')) {
            $google = Socialite::driver('google')->user();
            $user = User::firstOrCreate(
                [
                    'email' => $google->email,
                ],
                [
                    'name' => $google->name,
                    'email' => $google->email,
                    'socialite_signup' => true,
                    'form_signup' => false
                ]);

            session(['user' => $user]);

            return $user;
        }

        return session('user');
    }
}
