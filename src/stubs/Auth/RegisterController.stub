<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Auth\Controller;
use Illuminate\Validation\Rules\Password;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Ikechukwukalu\Sanctumauthstarter\Notifications\WelcomeUser;
use Ikechukwukalu\Sanctumauthstarter\Events\EmailVerification;
use Ikechukwukalu\Sanctumauthstarter\Traits\Helpers;

class RegisterController extends Controller
{
    use Helpers;

    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * User form registration.
     *
     * Within the config file, you are required to determine whether a
     * user should recieve welcome and verification emails after
     * registration by setting <b>registration.notify.welcome</b> to <b>TRUE</b> and
     * <b>registration.notify.verify</b> to <b>TRUE</b> respectively.
     * You can also set <b>registration.autologin</b> to <b>TRUE</b>.
     *
     * @bodyParam name string required The full name of the user. Example: John Doe
     * @bodyParam email string required The email of the user. Example: johndoe@xyz.com
     * @bodyParam password string required The password for user authentication must contain uppercase, lowercase, symbols, numbers. Example: Ex@m122p$%l6E
     * @bodyParam password_confirmation string required Must match <small class="badge badge-blue">password</small> Field. Example: Ex@m122p$%l6E
     *
     * @response 200
     *
     * //if autologin is set to FALSE
     *
     * {
     * "status": "success",
     * "status_code": 200,
     * "data": {
     *      "message": string
     *  }
     * }
     *
     * //if autologin is set to TRUE
     *
     * {
     * "status": "success",
     * "status_code": 200,
     * "data": {
     *      "message": string
     *      "access_token": string
     *  }
     * }
     *
     * @group No Auth APIs
     */
    protected function register(Request $request): JsonResponse
    {
        $validator = Validator::make($request->all(), [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', Password::min(8)->letters()
                                            ->mixedCase()->numbers()
                                            ->symbols()->uncompromised(),
                                        'confirmed'],
        ]);

        if ($validator->fails()) {
            $data = (array) $validator->errors()->all();
            return $this->httpJsonResponse(trans('sanctumauthstarter::general.fail'), 500, $data);
        }

        $user =  User::create([
            'email' => $request->email,
            'name' => $request->name,
            'password' => Hash::make($request->password)
        ]);

        $data = [];

        if (config('sanctumauthstarter.registration.autologin', false)) {
            Auth::login($user);
            $token = $user->createToken($request->email);
            $data['access_token'] = $token->plainTextToken;
        }

        if (config('sanctumauthstarter.registration.notify.welcome', true)) {
            //Welcome email
            $user->notify(new WelcomeUser($user));
        }

        if (config('sanctumauthstarter.registration.notify.verify', true)) {
            EmailVerification::dispatch($user);
        }

        $data['message'] = trans('sanctumauthstarter::register.success');

        return $this->httpJsonResponse(trans('sanctumauthstarter::general.success'), 200, $data);
    }
}
